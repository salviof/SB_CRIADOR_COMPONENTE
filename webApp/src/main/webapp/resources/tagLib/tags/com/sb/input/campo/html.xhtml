<ui:composition
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"

    xmlns:f="http://xmlns.jcp.org/jsf/core"
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    xmlns:p="http://primefaces.org/ui"

    xmlns:c="http://xmlns.jcp.org/jsp/jstl/core">
    <ui:decorate template="#{layout.xhtmlJsfCaminhoRelativo}">
        <ui:define name="input">

            <p:editor height="300" style="width: 100%"
                      rendered="#{desabilitarEdicao}"
                      value="#{valor}"
                      disabled="true"
                      />
            <h:panelGroup styleClass="Container12 Responsive" style="height: 400px; "
                          rendered="#{!desabilitarEdicao}"

                          >
                

                <p:inputText

                    class=" campoResponsivo  TexAlCenter #{componente.classeCSS} invisivel"
                    disabled="#{desabilitarEdicao}"
                    rendered="#{!desabilitarEdicao}"
                    required="#{obrigatorio}"
                    value="#{valor}"
                    validatorMessage="O campo #{label} não é um valor válido"
                    requiredMessage="O campo #{label} não foi informado! "

                    validator="org.super_bits.view.validadores.generico"

                    converterMessage="Impossível converter o valor de #{label} em um tipo válido "
                    >
                    <f:passThroughAttribute name="caminhoCampo" value="#{registro.nomeCompostoIdentificador}" />
                    <f:passThroughAttribute name="dominio" value="#{registro.nomeClasseOrigemAtributo}" />
                    <f:passThroughAttribute name="campoInstanciado" value="#{registro}" />







                    <c:if test="#{atualizarGrupoOnChange}" >
                        <p:ajax
                            rendered="#{atualizarGrupoOnChange}"
                            event="valueChange"
                            update="#{pgUtil.getNomeIdPainelDoComponente(component)}"/>
                    </c:if>

                    <c:if test="#{atualizarFormOnChange}" >
                        <p:ajax
                            rendered="#{atualizarFormOnChange}"
                            event="valueChange"

                            update="@form"/>
                    </c:if>

                    <c:if test="#{possuiMetodoOnChange}" >
                        <p:ajax rendered="#{possuiMetodoOnChange}"
                                global="true"

                                event="valueChange"
                                listener="#{prMetodo}"/>
                    </c:if>


                    <c:if test="#{possuiIDOnChange}" >
                        <p:ajax
                            rendered="#{possuiIDOnChange}"
                            event="valueChange"
                            update="#{idAtualizarOnChange}"
                            onstart="bloquearArea('#{idAtualizarOnChange}')"
                            oncomplete="desbloquearArea('#{idAtualizarOnChange}')"
                            />

                    </c:if>

                </p:inputText>

                <h:inputTextarea value="#{valor}" style="width: 1px; height: 1px;"  styleClass="invisivel"/>
                <script src="#{infoWebApp.urlPagina}/libUrlPadrao/ckeditor/ckeditor.js"></script>
                <script type="text/javascript">

                    function recarregarCK#{component.id}() {

                        try {
                            for (var i in CKEDITOR.instances) {
                                CKEDITOR.instances[i].removeAllListeners();
                                CKEDITOR.remove(CKEDITOR.instances[i]);
                            }

                            var CKEDITOR_BASEPATH = '/libUrlPadrao/ckeditor/';

                            CKEDITOR.replace('#{component.children.get(1).clientId}', {
                                extraPlugins: 'placeholderSeletor',
                                toolbarGroups: [{
                                        "name": "basicstyles",
                                        "groups": ["basicstyles"]
                                    },
                                    {
                                        "name": "links",
                                        "groups": ["links"]
                                    },
                                    {
                                        "name": "paragraph",
                                        "groups": ["list", "blocks"]
                                    },
                                    {
                                        "name": "insert",
                                        "groups": ["insert"],
                                    },
                                    {
                                        "name": "styles",
                                        "groups": ["styles"]
                                    },
                                    {
                                        "name": "document",
                                        "groups": ["mode"]
                                    }
                                ],
                                removeButtons: 'Flash,Save,NewPage,Preview,New',
                                on: {
                                    loaded: function (evt) {

                                        CKEDITOR.instances['#{component.children.get(1).clientId}'].on('focus', function () {
                                            mesclarOnChangeComDelayCkEditor('#{component.children.get(1).clientId}', '#{component.children.get(0).clientId}');
                                        });
                                        CKEDITOR.instances['#{component.children.get(1).clientId}'].on('change', function () {
                                            copiarValoresCKEditor('#{component.children.get(1).clientId}', '#{component.children.get(0).clientId}');
                                        });
                                    }
                                }

                            });
                        } catch (t) {
                            console.log("Houve um erro carregando o ckEditor");
                        }
                    }
                    recarregarCK#{component.id}();
                </script>
                <h:panelGroup style="display: block; width: 1%; height:400px; overflow:hidden;" ></h:panelGroup>
            </h:panelGroup>


        </ui:define>

    </ui:decorate>
</ui:composition>
